#! /usr/bin/env bash
# --------------------------------------------------------------------
#                               SOURCE
# --------------------------------------------------------------------
# https://arslan.io/2019/07/03/how-to-write-idempotent-bash-scripts/
# https://timvisee.com/blog/elegant-bash-conditionals/
# https://eklitzke.org/bash-$*-and-$@
# https://dev.to/rpalo/handling-arguments-in-bash-scripts-3o5m
# https://joshstaiger.org/archives/2005/07/bash_profile_vs.html
# https://dev.to/awwsmm/101-bash-commands-and-tips-for-beginners-to-experts-30je

# When you login (type username and password) via console: .bash_profile is executed to configure your shell before the initial command prompt.

# But, if you’ve already logged into your machine and open a new terminal window (xterm) inside Gnome or KDE, then .bashrc is executed before the window command prompt. 
# .bashrc is also run when you start a new bash instance by typing /bin/bash in a terminal

# Recommendation
# Most of the time you don’t want to maintain two separate config files for login and non-login shells — when you set a PATH, you want it to apply to both. 
# You can fix this by sourcing .bashrc from your .bash_profile file, then putting PATH and common settings in .bashrc.

# To do this, add the following lines to .bash_profile:
if [ -f ~/.bashrc ]; then
   source ~/.bashrc
fi

# script parameters
$*	 # $1 $2 $3...
$@	 # $1 $2 $3...
"$*" # "$1 $2 $3..."
"$@" # "$1" "$2" "$3"...

ARG="${1? Missing value for argument 1}"

url=https://assertnotmagic.com/about
echo ${url#*/}     # Remove from the front, matching the pattern */, non-greedy
# => /assertnotmagic.com/about
echo ${url##*/}    # Same, but greedy
# => about
echo ${url%/*}     # Remove from the back, matching the pattern /*, non-greedy
# => https://assertnotmagic.com
echo ${url%%/*}    # Same, but greedy
# => https:

# You can uppercase matching letters!
echo ${url^^a}
# => https://AssertnotmAgic.com/About

# You can replace patterns.
echo ${url/https/ftp}
# => ftp://assertnotmagic.com

# working directory
pwd

# List the contents of this directory
ls

# Show hidden ("dot") files with ls -a
# Show file details with ls -l
# Combine multiple flags like ls -l -a
# You can sometimes chain flags like ls -la instead of ls -l -a

# change directory
cd
# cd to the parent directory”
cd ..

# create file
touch name_faile
# create directory
mkdir name_directory

# remove files/directories rm/rmdir
# rmdir removes empty directories only
# prompt rm -i
# you can remove a directory -- and all of its contents
rm -rf #(-r = recursive, -f = force)

# Moving and Copying Files, Making Links, Command History mv / cp / ln
mv a b
cp a b
# The -f flag removes the target destination before creating the symbolic link, hence it’ll always succeed.
ln -sfn source target

# simple if-statements
if [ expression ]
then
    command
fi
# or
if [ expression ]; then command; fi

# control operators

&& # the AND operator, run the following command only if previous succeeded
|| # the OR operator, run the following command only if previous failed

# exit codes
# The exit code is normally hidden. The status of the last run command is stored in the ? variable. You may inspect it by invoking

echo $?

# Imagine you want to source the ~/.profile file, but only if it is readable

if [ -r ~/.profile ]; then
    source ~/.profile
fi

# We can simplify this using control operators

[ -r ~/.profile ] && . ~/.profile
cat ~/.profile && echo This is your profile || echo Failed to read profile
init && configure && install && cleanup || echo Install failed

# A function or script returns the exit code of the last expression
test -f "FILE" && source "$_" || echo "$_ does not exist" >&2

# job control

# The fg command moves a background job into the foreground.
# The bg command moves a suspended foreground job into the background.
# The jobs command shows the current list of jobs.
# The kill command can kill jobs or send signals to them.
# The disown command removes a job from the list of jobs (without killing it).
# A foreground job can be suspended by typing ^Z (Control-Z). A suspended job is temporarily stopped

# --------------------------------------------------------------------
# -e - Exit immediately if any command fails.
# -u - Exit if an unset variable is invoked.
# -o pipefail - Exit if a command in a piped series of commands fails.

set -euo pipefail

# Optional arguments
# Adding :- after the variable name tells Bash that the string following :- should be used as the value when the variable has not been set.

set -o nounset
docker_file="${1:-Dockerfile-build}"

# Sensitive data
# If your script is going to work with sensitive data, passwords or secret tokens

set +o xtrace
set -o xtrace

# Exit on error
set -o errexit

# Never use mkdir directly, instead use it with the-p flag. This flag make sure mkdir won’t error if the directory exists

mkdir -p mydir



# delete file/files. Use the -f flag which ignores non-existent files.
rm -f example.txt

# head / tail / cat / less
head -n 3 c

# cat / less
# concatenates a list of files and sends them to the standard output stream (usually the terminal)

# nano is a minimalistic command-line text editor

# nedit is a small graphical editor

# GUI editors -> emacs, vi, vim, gedit



# history built-in command to display your whole history
history | tail -n 5

# If you run history in your terminal you should get a list of commands previous run by your account.
$ HISTTIMEFORMAT='I ran this at: %d/%m/%y %T '

# So this is an alternative to running sleep 1 && exit: $ TMOUT=1

# !-n refers to the nth latest command: !-1 refers to the latest command, !-2 to the command before that, etc.
!-n

# !! is oftentimes used in conjunction with sudo, to re-execute the previous command with superuser privileges when it failed, due to a lack of permission.
sudo !!

# !^ maps to the first argument of your latest command
# !$ maps to the last argument of your latest command
vim !^
vim !$

!#:1 – The ‘The Current Line’ One

$ cp /path/to/some/file !#:1.bak
cp /path/to/some/file /path/to/some/file.bak

# Your home directory ~	
# Your current working directory ~+	
# Your previous working directory ~-	

# ** is expanded to all files and directories in the children directories, with a depth limit of 1.
ls **
mv **/*.{jpg,mp3} ~/assets/

# Brace expansion
mkdir ~/test/{pics,sounds,sprites}
touch ~/test/sounds/noise-{1..5}.mp3

# Your shell can replace a command surrounded by $() with its output.
My name is $(whoami) and I live in $HOME

# Renaming multiple directories
# the */ glob pattern is expanded over the list of directories, on which we iterate via a for loop
for dir in */; do
    mv "$dir" "$(echo "$dir" | tr '[:lower:]' '[:upper:]')"
  done

# Modifying a file
# Here the -q means silent mode and -F enables fixed string mode. Grep will silently fail if /mnt/dev doesn’t exist so the echo statement will never be called.
# If this is run again, you’ll end up having duplicate entries in your /etc/fstab. One way of making this idempotent is to make sure to check for certain placeholders via grep

if ! grep -qF "/mnt/dev" /etc/fstab; then
  echo "/dev/sda1 /mnt/dev ext4 defaults 0 0" | sudo tee -a /etc/fstab
fi

# Check if variable, file or dir exists

echo "complex set of rules" > /etc/conf/foo.txt

# Calculating the text might be an expensive operation, hence you don’t want to write it every time you call the script. 
# To make it idempotent you check if the file exists via the -f flag of the inbuilt test property of the shell:

if [ ! -f "/etc/conf/foo.txt" ]; then
 echo "complex set of rules" > /etc/conf/foo.txt
fi

# Here -f is just an example, there are many other flags you can use, such:
# -d: directory
# -z: string of zero length
# -p: pipe
# -x: file and has execute permission

# install 1password CLI

if ! [ -x "$(command -v op)" ]; then
  export OP_VERSION="v0.5.6-003"
  curl -sS -o 1password.zip https://cache.agilebits.com/dist/1P/op/pkg/${OP_VERSION}/op_linux_amd64_${OP_VERSION}.zip
  unzip 1password.zip op -d /usr/local/bin
  rm -f 1password.zip
fi

# Formatting a device
# To format a volume, say with an ext4 format, you can use a command like the following
# This command prints attributes for a given block device. 
# Hence prepending basically means to proceed with formatting only when blkid fails, which is an indication that the given volume is not formatted yet.

blkid "$VOLUME_NAME" || mkfs.ext4 "$VOLUME_NAME"

# Mounting a device
# Trying to mount a volume to an existing directory can be done with the following example command
# One way is to check the output of mount command and see if the volume is already mounted. But there is a better way to do it. Using the mountpoint command

if ! mountpoint -q "$DATA_DIR"; then
  mount -o discard,defaults,noatime "$VOLUME_NAME" "$DATA_DIR"
fi

# --------------------------------------------------------------------
# Getting system information
# This will show the uptime, CPU temperature, current CPU frequency, battery status and RAM usage. 
# The various commands used will differ somewhat between platforms and distributions.
# .bash_aliases

alias inf="uname -sr && uptime| sed 's/ //' && sensors|grep Pack && \
           lscpu|grep 'CPU MHz:' && acpi && \
           echo -n 'Memory in use: ' && free -m|grep Mem|\
           awk '{print \$3+\$5\" megs\"}'"
           
# Listing directories

alias lsd="ls -d */"

# --------------------------------------------------------------------

# ShellCheck - A shell script static analysis tool
# source: https://github.com/koalaman/shellcheck#installing

shellcheck name_script

# Use tar to dump the archive directly into SSH and un-tar it at the other

tar cf - 100k | ssh joe@10.1.0.1:/destination/ "tar -x" 

# VI

# i or a - editing
# ^ - Go to beginning of line
# $ - Go to end of line
# w - Go to next word
# b - Go to previous word
# e - Move to the end of the previous word
# r - e - Replace current character by another (ex: e)
# x - Delete current character
# d - b - Delete previous word
# d - w - Delete next word
# v - Edit the current command in your text editor
# u - Undo previous action(s)

